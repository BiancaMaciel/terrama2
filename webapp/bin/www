#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

var Database = require('./../config/Database');

/**
 * It defines which context nodejs should initialize. The context names are available in {@link config/config.terrama2}
 * @typeof {string}
 */
var nodeContext = process.argv[2];

/**
 * It defines which port nodejs should use. When this variables is used, it overrides port number from {@link config/config.terrama2}
 */
var nodeContextPort = process.argv[3];

// setting currentContext
Database.setCurrentContext(nodeContext);

return Database.init(nodeContext).then(function (sequelize) {
  var app = require('../app');
  var io = require('../io');
  var debug = require('debug')('webapp:server');
  var http = require('http');
  var load = require('express-load');
  var portNumber = '36000';
  var PluginLoader = require("../core/PluginLoader");
  var DataManager = require("../core/DataManager");
  var TcpManager = require("../core/TcpManager");
  var PortScanner = require("./../core/PortScanner");
  var TcpService = require("./../core/facade/tcp-manager/TcpService");

  var currentContext = Database.getContextConfig();

  var debugMessage = "";

  if (PortScanner.isValidPort(currentContext.port)) {
    portNumber = currentContext.port;
  } else {
    debugMessage = "No valid port found. The default port " + portNumber + " will be used";
  }

  /**
   * Get port from environment and store in Express.
   */
  var port = normalizePort(process.env.PORT || portNumber);
  app.set('port', port);

  /**
   * Create HTTP server.
   */
  var server = http.createServer(app);

  return PluginLoader.initialize(__dirname + "/../plugins/").then(function() {

    // storing active connections
    var connections = {};

    // getting db configuration and initializes data manager
    return DataManager.init(function(error) {
      if (error) {
        console.log(error);
        process.exit(1);
        return;
      }

      // loading terrama2 data
      return DataManager.load()
        .then(function() {
          // initialize service listeners
          return TcpService.init()
            .finally(function() {
              if (debugMessage) {
                console.log(debugMessage);
              }
              console.log("Initializing TerraMA2 on port " + port);
              /**
               * Listen on provided port, on all network interfaces.
               */
              server.listen(port);

              // approach for handling connections and remove it to avoid unclosed nodejs server
              server.on('connection', function(conn) {
                var key = conn.remoteAddress + ':' + conn.remotePort;
                connections[key] = conn;

                conn.on('close', function() {
                  delete connections[key];
                })
              });

              server.on('error', onError);
              server.on('listening', onListening);
              server.on('close', onClose);

              // detecting sigint error and then close server
              process.on('SIGINT', function(){
                DataManager.finalize().then(function() {
                  var _closeServer = function() {
                    server.close(function() {
                      console.log("TerraMA2 finalized");
                    });

                    for (var key in connections)
                      connections[key].destroy();
                  };

                  TcpService.finalize();
                  TcpManager.disconnect();

                  _closeServer();
                });
              });

              io.attach(server);
              load('sockets').into(io);
            })
        }).catch(function(err) {
          console.log("Could not load datamanager: " + err.message);
          process.exit(1);
        });
    });
  });

  /**
   * Normalize a port into a number, string, or false.
   */
  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for server close. It unloads plugins
   */
  function onClose() {
    PluginLoader.plugin.unloadAll();
  }

  /**
   * Event listener for HTTP server "listening" event.
   */
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;

    debug('Listening on ' + bind);
  }
}).catch(function(err) {
  console.error("Could not initialize TerraMA2 database " + err.toString());
  process.exit(1);
});